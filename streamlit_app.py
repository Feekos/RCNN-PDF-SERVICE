import streamlit as st
import requests
from PIL import Image
import numpy as np
import io
import matplotlib.pyplot as plt
import networkx as nx
import base64
import tempfile
import pandas as pd

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
FASTAPI_URL = "http://localhost:8000/process_pdf"

# === –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å ===
st.set_page_config(page_title="PDF Analyser", layout="wide")
st.title("üìÑ –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–µ–π –∏–∑ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
st.markdown("–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (—Å—Ç–∞—Ç–µ–π) –≤ –≤–∏–¥–µ PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º U-Net, LayoutLMv3 –∏ –≥—Ä–∞—Ñ–æ–≤–æ–π –º–æ–¥–µ–ª–∏.")
st.caption("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö –í–ö–† –Ω–∞ —Ç–µ–º—É: \n**–ú–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF –≤ –º–∞—à–∏–Ω–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç**")

# === –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ===
st.sidebar.header("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç")
uploaded_file = st.sidebar.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ PDF-—Ñ–∞–π–ª", type="pdf")

if uploaded_file is not None:
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmpfile:
        tmpfile.write(uploaded_file.getvalue())
        temp_pdf_path = tmpfile.name

    st.sidebar.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

    if st.sidebar.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É"):
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF..."):
            files = {"pdf_file": (uploaded_file.name, open(temp_pdf_path, "rb"), "application/pdf")}
            try:
                response = requests.post(FASTAPI_URL, files=files)

                if response.status_code == 200:
                    result = response.json()
                    results = result.get("results", [])

                    st.sidebar.success("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

                    # === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã ===
                    table_data = []

                    for page_data in results:
                        page_num = page_data["page"]
                        title = page_data["title"] or "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
                        authors = ", ".join(page_data["authors"]) if page_data["authors"] else "–ù–µ –Ω–∞–π–¥–µ–Ω—ã"
                        bibliography = page_data["bibliography"] or "–ù–µ –Ω–∞–π–¥–µ–Ω–∞"

                        table_data.append({
                            "–°—Ç—Ä–∞–Ω–∏—Ü–∞": page_num + 1,
                            "–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏": title,
                            "–ê–≤—Ç–æ—Ä—ã": authors,
                            "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": bibliography
                        })

                    df = pd.DataFrame(table_data)

                    # === –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV –∏ XLSX ===
                    col1, col2 = st.columns(2)
                    with col1:
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –∫–∞–∫ CSV",
                            data=df.to_csv(index=False, sep=";", encoding="utf-8-sig"),
                            file_name="structured_output.csv",
                            mime="text/csv"
                        )
                    with col2:
                        towrite = io.BytesIO()
                        df.to_excel(towrite, index=False, engine='openpyxl')
                        towrite.seek(0)  # rewind the buffer
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –∫–∞–∫ XLSX",
                            data=towrite,
                            file_name="structured_output.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )

                    # === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ ===
                    for page_data in results:
                        page_num = page_data["page"]
                        title = page_data["title"]
                        authors = page_data["authors"]
                        bibliography = page_data["bibliography"]

                        st.subheader(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}")
                        st.markdown(f"**### üîñ –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏**\n{title or '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}")
                        st.markdown(f"**### üë§ –ê–≤—Ç–æ—Ä—ã**\n{', '.join(authors) if authors else '–ù–µ –Ω–∞–π–¥–µ–Ω—ã'}")
                        st.markdown(f"**### üìö –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞**\n{bibliography or '–ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")

                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Å–∫–∏
                        mask_array = np.array(page_data["mask_preview"])
                        mask_image = Image.fromarray((mask_array * 255 / mask_array.max()).astype(np.uint8))
                        st.image(mask_image, caption=f"–ú–∞—Å–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}", use_column_width=True)

                        # –ì—Ä–∞—Ñ–æ–≤–∞—è –º–æ–¥–µ–ª—å
                        try:
                            G = nx.node_link_graph(page_data["graph"])
                            plt.figure(figsize=(10, 6))
                            nx.draw(G, with_labels=True, node_size=700, node_color="lightblue")
                            st.pyplot(plt)
                        except Exception as e:
                            st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≥—Ä–∞—Ñ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")

                else:
                    st.error("–û—à–∏–±–∫–∞ API: –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ {}".format(response.status_code))
                    st.code(response.text)

            except Exception as e:
                st.error(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n{str(e)}")

else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF-—Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")