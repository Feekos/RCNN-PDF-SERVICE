import os
import torch
from PIL import Image
import cv2
import numpy as np
import json
import time
import logging
import matplotlib.pyplot as plt
from unet_model import UNet
from torchvision import transforms
from transformers import LayoutLMv3Processor, LayoutLMv3ForTokenClassification
from collections import defaultdict
from transformers import logging as transformers_logging

transformers_logging.set_verbosity_error()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === –ü—É—Ç–∏ ===
IMAGES_ROOT_DIR = "enhanced_images"  # –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ —Å –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞–º–∏
ANNOTATIONS_DIR = "annotations"
MODEL_PATH = "unet_publaynet.pth"

os.makedirs(ANNOTATIONS_DIR, exist_ok=True)

# === –ö–õ–ê–°–°–´ –î–õ–Ø –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–ò ===
CLASSES = {
    0: 'background',
    1: 'text',
    2: 'title',
    3: 'author',
    4: 'figure',
    5: 'table',
    6: 'bibliography'
}

LABEL_MAP_LAYOUTLM_TO_CLASSES = {
    "Text": "text",
    "Title": "title",
    "Author": "author",
    "Figure": "figure",
    "Table": "table",
    "Bibliography": "bibliography",
    "PageFooter": "figure",  # –ú–∞–ø–ø–∏–Ω–≥ —Ä–µ–¥–∫–∏—Ö –∫–ª–∞—Å—Å–æ–≤
    "PageHeader": "header",  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –∏–ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å
    "Footnote": "bibliography",
    "Formula": "text",
    "List-item": "text",
    "Caption": "title",
    "Section-header": "title",
    "Abstract": "text",
    "Document-header": "title",
    "Document-footer": "footer",
    "Picture": "figure",
    "Other": "background"
}

# === –¢–†–ê–ù–°–§–û–†–ú–ê–¶–ò–ò ===
transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Resize((512, 512)),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

# === –£–°–¢–†–û–ô–°–¢–í–û ===
DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu")


# === –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ò U-NET ===
def load_unet_model(model_path, n_classes=len(CLASSES)):
    logger.info("üß† –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ U-Net...")
    model = UNet(n_classes=n_classes)
    model.load_state_dict(torch.load(model_path, map_location=DEVICE))
    model.to(DEVICE)
    model.eval()
    return model


# === –°–ï–ì–ú–ï–ù–¢–ê–¶–ò–Ø –° –ü–û–ú–û–©–¨–Æ U-NET ===
def segment_page_with_unet(image_path, model):
    image = Image.open(image_path).convert("RGB").resize((512, 512))
    input_tensor = transform(image).unsqueeze(0).to(DEVICE)

    with torch.no_grad():
        output = model(input_tensor)
        mask = torch.argmax(output, dim=1).squeeze().cpu().numpy()

    logger.debug(f"‚úÖ –ú–∞—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è {image_path}")
    return image, mask


# === –ì–ï–ù–ï–†–ê–¶–ò–Ø –ê–ù–ù–û–¢–ê–¶–ò–ô –ü–û –ú–ê–°–ö–ï ===
def generate_annotation_from_mask(mask, image_size=(512, 512), min_box_size=5):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –ø–æ –º–∞—Å–∫–µ —Å —É—á—ë—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
    """
    annotations = []
    for cls_id, label in CLASSES.items():
        if cls_id == 0:
            continue  # –ü—Ä–æ–ø—É—Å–∫ —Ñ–æ–Ω–∞

        coords = cv2.findNonZero((mask == cls_id).astype(np.uint8))
        if coords is None or len(coords) < 2:
            continue

        x, y, w, h = cv2.boundingRect(coords)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        if w < min_box_size or h < min_box_size:
            continue

        annotation = {
            "id": f"result_{cls_id}",
            "from_name": "label",
            "to_name": "image",
            "type": "RectangleLabels",
            "value": {
                "x": int(x / image_size[0] * 100),
                "y": int(y / image_size[1] * 100),
                "width": int(w / image_size[0] * 100),
                "height": int(h / image_size[1] * 100),
                "rotation": 0,
                "rectanglelabels": [label]
            }
        }

        annotations.append(annotation)

    return annotations


# === –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï LayoutLMv3 (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç) ===
def detect_layout_elements(image_path):
    processor = LayoutLMv3Processor.from_pretrained("microsoft/layoutlmv3-base")
    model = LayoutLMv3ForTokenClassification.from_pretrained("microsoft/layoutlmv3-base")

    image = Image.open(image_path).convert("RGB")

    encoding = processor(
        image,
        return_tensors="pt",
        padding="max_length",
        truncation=True,
        max_length=512
    ).to(DEVICE)

    if "word_boxes" in encoding:
        del encoding["word_boxes"]

    with torch.no_grad():
        outputs = model(**encoding)
        predictions = torch.argmax(outputs.logits, dim=-1)

    tokens = processor.tokenizer.convert_ids_to_tokens(encoding["input_ids"][0])
    boxes = encoding["bbox"][0].cpu().numpy()
    labels = predictions[0].cpu().numpy()

    width, height = image.size
    elements = []

    for token, box, label_id in zip(tokens, boxes, labels):
        raw_label = model.config.id2label[label_id]

        # –ú–∞–ø–ø–∏–Ω–≥ –≤ –≤–∞—à–∏ –∫–ª–∞—Å—Å—ã
        mapped_label = LABEL_MAP_LAYOUTLM_TO_CLASSES.get(raw_label, None)

        # –í—ã–≤–æ–¥ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.debug(f"üîç –¢–æ–∫–µ–Ω: {token}, Raw Label: {raw_label}, Mapped Label: {mapped_label}")

        if mapped_label is None:
            continue

        x1, y1, x2, y2 = box
        x1 = int(x1 / 1000 * width)
        y1 = int(y1 / 1000 * height)
        x2 = int(x2 / 1000 * width)
        y2 = int(y2 / 1000 * height)
        w = x2 - x1
        h = y2 - y1

        # –£–±–∏—Ä–∞–µ–º –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ —Ä–µ–≥–∏–æ–Ω—ã
        if w < 2 or h < 2:
            continue

        elements.append({
            "token": token,
            "box": [x1, y1, x2, y2],
            "raw_label": raw_label,
            "mapped_label": mapped_label
        })

    logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {image_path}: {len(elements)}")
    return elements


# === –°–û–•–†–ê–ù–ï–ù–ò–ï –ê–ù–ù–û–¢–ê–¶–ò–ò Label Studio ===
def save_label_studio_annotation(image_name, image_path, annotation_data):
    result = [{
        "id": f"result_{i + 1}",
        "from_name": "label",
        "to_name": "image",
        "type": "RectangleLabels",
        "value": data["value"]
    } for i, data in enumerate(annotation_data)]

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    relative_path = os.path.relpath(image_path, start=IMAGES_ROOT_DIR)
    parts = relative_path.split(os.sep)
    if len(parts) < 2:
        raise ValueError(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—É—Ç–∏: {image_path}")

    subfolder = parts[0]
    filename = os.path.splitext(os.path.basename(image_name))[0]  # 'enhanced_page_0'

    final_filename = f"{subfolder}_{filename}.json"
    path = os.path.join(ANNOTATIONS_DIR, final_filename)

    with open(path, "w", encoding="utf-8") as f:
        json.dump({
            "data": {"image": f"/data/local-files/?d={image_name}"},
            "predictions": [{
                "model_version": "layout-unet-v1",
                "result": result
            }]
        }, f, indent=2, ensure_ascii=False)

    logger.info(f"üíæ –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {final_filename} | –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(result)}")
    return len(result)


# === –†–ï–ö–£–†–°–ò–í–ù–´–ô –ü–û–ò–°–ö –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===
def find_all_images(root_dir):
    image_paths = []
    for root, _, files in os.walk(root_dir):
        for file in files:
            if file.lower().endswith(".png"):
                image_paths.append(os.path.join(root, file))
    return image_paths


# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ===
if __name__ == "__main__":
    start_time = time.time()
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π...")

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    all_image_paths = find_all_images(IMAGES_ROOT_DIR)
    if not all_image_paths:
        logger.error("üñºÔ∏è –ù–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤.")
        exit()

    # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    unet_model = None
    if os.path.exists(MODEL_PATH):
        unet_model = load_unet_model(MODEL_PATH)

        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        test_image_path = all_image_paths[0]
        try:
            image, mask = segment_page_with_unet(test_image_path, unet_model)
            print("Test mask shape:", mask.shape)
            print("Unique values in test mask:", np.unique(mask))
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ U-Net: {e}")
    else:
        logger.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å U-Net –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é LayoutLMv3.")

    # –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –≤–æ –≤—Å–µ—Ö –ø–æ–¥–∫–∞—Ç–∞–ª–æ–≥–∞—Ö
    total_pages = 0
    total_annotations = 0
    class_distribution = defaultdict(int)

    for img_path in all_image_paths:
        try:
            logger.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞: {img_path}")

            if unet_model is not None:
                image, mask = segment_page_with_unet(img_path, unet_model)
                annotation_data = generate_annotation_from_mask(mask)
            else:
                layout_elements = detect_layout_elements(img_path)
                annotation_data = [
                    {
                        "value": {
                            "x": int(elem['box'][0] / 512 * 100),
                            "y": int(elem['box'][1] / 512 * 100),
                            "width": int((elem['box'][2] - elem['box'][0]) / 512 * 100),
                            "height": int((elem['box'][3] - elem['box'][1]) / 512 * 100),
                            "rotation": 0,
                            "rectanglelabels": [elem['mapped_label']]
                        },
                        "from_name": "label",
                        "to_name": "image",
                        "type": "RectangleLabels"
                    }
                    for elem in layout_elements
                ]

            num_annots = save_label_studio_annotation(os.path.basename(img_path), img_path, annotation_data)
            total_annotations += num_annots
            total_pages += 1

            # –ü–æ–¥—Å—á—ë—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
            for ann in annotation_data:
                label = ann["value"]["rectanglelabels"][0]
                class_distribution[label] += 1

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {img_path}: {e}")


    end_time = time.time()
    elapsed_time = round(end_time - start_time, 2)

    logger.info("üìä –ú–µ—Ç—Ä–∏–∫–∏:")
    logger.info(f"üìÑ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}")
    logger.info(f"üìå –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {total_annotations}")
    logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time} —Å–µ–∫—É–Ω–¥")
    logger.info("üß© –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
    for label, count in class_distribution.items():
        logger.info(f"   - {label}: {count}")